---
import { DEFAULT_LANGUAGE, DEFAULT_THEME, LANGUAGES, THEMES } from '@constants'
import Select from '@components/Select.astro'
import CodeIcon from './icons/CodeIcon.astro'
import PrimaryButton from './PrimaryButton.astro'
import ShareDocumentModal from './ShareDocumentModal.astro'

interface Props {
  theme?: string
  language?: string
  showControls?: boolean
  initialContent?: string
  editor_class?: string
  isReadOnly?: boolean
}

const {
  theme = DEFAULT_THEME,
  language = DEFAULT_LANGUAGE,
  showControls,
  initialContent,
  editor_class,
  isReadOnly
} = Astro.props
---

<ShareDocumentModal id="share-code-modal" />

<div class="flex flex-col items-center h-full w-[90%] mx-auto">
  {
    showControls && (
      <div class="flex gap-2 items-center justify-end w-full">
        <Select
          id="theme"
          title="Theme"
          options={THEMES}
          selectedOptionValue={DEFAULT_THEME}
        />
        <Select
          id="language"
          title="Language"
          options={LANGUAGES}
          selectedOptionValue={DEFAULT_LANGUAGE}
        />
      </div>
    )
  }
  <div
    id="editor"
    class={`${editor_class} h-96 w-full`}
    data-theme={theme}
    data-is-read-only={isReadOnly ? 'true' : 'false'}
    data-initial-content={initialContent}
    data-language={language}>
  </div>
  {
    showControls && (
      <PrimaryButton
        id="btn-share"
        className="flex items-center gap-2 text-lg my-10 mx-auto">
        Share code <CodeIcon />
      </PrimaryButton>
    )
  }
</div>

<script>
  import { DocumentType } from '@constants'
  import { Notyf } from 'notyf'
  import 'notyf/notyf.min.css'

  import * as monaco from 'monaco-editor'
  import editorWorker from 'monaco-editor/esm/vs/editor/editor.worker?worker'
  import jsonWorker from 'monaco-editor/esm/vs/language/json/json.worker?worker'
  import cssWorker from 'monaco-editor/esm/vs/language/css/css.worker?worker'
  import htmlWorker from 'monaco-editor/esm/vs/language/html/html.worker?worker'
  import tsWorker from 'monaco-editor/esm/vs/language/typescript/ts.worker?worker'

  const selectTheme = document.getElementById('theme') as HTMLSelectElement
  const selectLanguage = document.getElementById(
    'language'
  ) as HTMLSelectElement
  const btnShare = document.getElementById('btn-share') as HTMLButtonElement
  const editorContainer = document.getElementById('editor') as HTMLDivElement
  const modal = document.getElementById('share-code-modal') as HTMLDivElement
  const txtModalLink = document.getElementById(
    'modal-txt-link'
  ) as HTMLSpanElement
  const notyf = new Notyf()

  let editor: monaco.editor.IStandaloneCodeEditor

  // If the component is conditionally rendered
  // the script will be executed anyway so we need to check if the element exists
  // https://github.com/withastro/astro/issues/5283
  if (editorContainer) {
    const isReadOnly = editorContainer.dataset.isReadOnly === 'true'
    const initialContent = editorContainer.dataset.initialContent
    const theme = editorContainer.dataset.theme!

    await changeTheme(theme)

    editor = monaco.editor.create(editorContainer, {
      value: initialContent ?? '// Write your code here',
      language: editorContainer.dataset.language,
      fontLigatures: true,
      automaticLayout: true,
      padding: {
        top: 15
      },
      readOnly: isReadOnly
    })

    self.MonacoEnvironment = {
      getWorker(_, label) {
        if (label === 'json') {
          return new jsonWorker()
        }
        if (label === 'css' || label === 'scss' || label === 'less') {
          return new cssWorker()
        }
        if (label === 'html' || label === 'handlebars' || label === 'razor') {
          return new htmlWorker()
        }
        if (label === 'typescript' || label === 'javascript') {
          return new tsWorker()
        }
        return new editorWorker()
      }
    }

    monaco.languages.typescript.typescriptDefaults.setEagerModelSync(true)
  }

  async function changeTheme(theme: string) {
    editorContainer.dataset.theme = theme
    try {
      const res = await fetch(`/themes/${theme}.json`)
      const data = await res.json()
      monaco.editor.defineTheme(theme, data)
    } catch (error) {}

    monaco.editor.setTheme(theme)
  }

  function changeLanguage(language: string) {
    const model = editor.getModel()
    editorContainer.dataset.language = language

    if (!model) {
      return
    }

    monaco.editor.setModelLanguage(model, language)
  }

  selectTheme?.addEventListener('change', async (e) => {
    const target = e.target as HTMLSelectElement
    const value = target.value
    await changeTheme(value)
  })

  selectLanguage?.addEventListener('change', (e) => {
    const target = e.target as HTMLSelectElement
    const value = target.value
    changeLanguage(value)
  })

  btnShare?.addEventListener('click', async () => {
    const code = editor.getValue()

    if (code.trim().length === 0) {
      notyf.error('Please enter some content')
      return
    }

    notyf.open({
      type: 'custom',
      message: 'Uploading document...',
      background: '#262626',
      duration: 5000
    })

    let response

    try {
      response = await fetch('/api/documents', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          content: code,
          type: DocumentType.code,
          language: editorContainer.dataset.language,
          theme: editorContainer.dataset.theme
        })
      })
    } catch (error) {
      notyf.error('Something went wrong')
      return
    }

    const data = await response.json()

    if (response.ok) {
      notyf.dismissAll()

      modal.classList.remove('hidden')
      modal.setAttribute('aria-hidden', 'false')
      txtModalLink.innerText = data.url

      editor.setValue('')
      editor.focus()
    } else {
      notyf.dismissAll()

      notyf.error('Something went wrong')
    }
  })
</script>
